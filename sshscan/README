From the ssh(1) man page

Protocol version 1 allows specification of a single cipher.
The supported values are:
- 3des (S) (L)
- blowfish (?) (L)
- des (W)
The default is ``3des''.

For protocol version 2, cipher_spec is a comma-separated list of
ciphers listed in order of preference.
The supported ciphers are:
- 3des-cbc (S) (L)
- aes128-cbc (S) (L)
- aes192-cbc (S) (L)
- aes256-cbc (S) (L)
- aes128-ctr (S)
- aes192-ctr (S)
- aes256-ctr (S)
- arcfour128 (?)
- arcfour256 (?)
- arcfour (? has 128 bit key)
- blowfish-cbc (? has 128 bit key) (L)
- cast128-cbc (S)

(S) Strong cipher
(W) Weak cipher
(?) Not sure on strength
(L) In libssh

CBC - Cipher Block Chaining
CTR - Stateful Decryption Counter (also abbreviated as SDCTR)

The default is: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
aes192-ctr,aes256-ctr

http://www.ietf.org/rfc/rfc4344.txt documents a lot more ciphers :-(

Host keys are either RSA or DSA

Tests to be performed:
- RSA and DSA keys should be 1024 bits or greater
- Only SSHv2
- (S)trong cipher from above list
- Do not allow login with null credentials
- Get the site banner and perhaps check against known bad versions

Protocol Analysis
After connection the server responds with a banner such as:
SSH-2.0-OpenSSH_4.3\n

Client then kicks in its banner
SSH-2.0-PuTTY_Release_0.60\r\n

Cipher names are then exchanged in clear text so it would be easy to synthesise. Client fires in a request first. Followed by the server response

Seems to be Length/Value tuples
kex_algorithms
server_host_key_algorithms
encryption_algorithms_client_to_server
encryption_algorithms_server_to_client
mac_algorithms_client_to_server
mac_algorithms_server_to_client
compression_algorithms_client_to_server
compression_algorithms_server_to_client
languages_client_to_server
languages_server_to_client



